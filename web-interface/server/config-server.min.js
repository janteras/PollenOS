const express = require('express');
const WebSocket = require('ws');
const http = require('http');
const config = require('../config/web-config');

class PollenConfigServer {
  constructor() {
    this.app = express();
    this.server = http.createServer(this.app);
    this.wss = new WebSocket.Server({ server: this.server });
    this.setupWebSocket();
  }

  setupWebSocket() {
    this.wss.on('connection', (ws) => {
      console.log('WebSocket client connected');

      ws.on('close', () => {
        console.log('WebSocket client disconnected');
      });

      ws.on('error', (error) => {
        console.error('WebSocket error:', error);
      });

      // Send initial status
      this.sendStatus(ws);

      // Set up interval for real-time updates
      const intervalId = setInterval(() => {
        this.sendStatus(ws);
      }, 5000);
    });
  }

  sendStatus(ws) {
    const status = {
      type: 'status',
      payload: {
        timestamp: new Date().toISOString(),
        bots: [
          { id: 1, name: 'Conservative Bot', status: 'active' },
          { id: 2, name: 'Momentum Bot', status: 'active' },
          { id: 3, name: 'Technical Bot', status: 'active' },
          { id: 4, name: 'Mean Reversion Bot', status: 'active' },
          { id: 5, name: 'Breakout Bot', status: 'active' }
        ]
      }
    };
    ws.send(JSON.stringify(status));
  }
}

if (require.main === module) {
  const server = new PollenConfigServer();
  server.server.listen(config.PORT, config.HOST, () => {
    console.log(`🌐 PollenOS Configuration Interface running on ${config.INTERFACE_URL}`);
    console.log(`📊 WebSocket server ready for real-time updates`);
    console.log(`🔗 Access the interface at: ${config.INTERFACE_URL}`);
    console.log(`🔗 WebSocket URL: ${config.WEBSOCKET_URL}`);
  });
}
